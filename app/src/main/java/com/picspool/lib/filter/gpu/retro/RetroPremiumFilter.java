package com.picspool.lib.filter.gpu.retro;

import com.picspool.lib.filter.gpu.normal.GPUImageToneCurveFilter;

/* loaded from: classes3.dex */
public class RetroPremiumFilter extends GPUImageToneCurveFilter {
    private static final String FRAGMENT_SHADER = "precision highp float;\n varying highp vec2 textureCoordinate;\n uniform sampler2D inputImageTexture;\n uniform sampler2D toneCurveTexture;\nconst highp vec3 W = vec3(0.2125, 0.7154, 0.0721);\n uniform lowp float mixturePercent;\n\n void main()\n {\n     lowp vec4 textureColor = texture2D(inputImageTexture, textureCoordinate);\n     lowp float redCurveValue = texture2D(toneCurveTexture, vec2(textureColor.r, 0.0)).r;\n     lowp float greenCurveValue = texture2D(toneCurveTexture, vec2(textureColor.g, 0.0)).g;\n     lowp float blueCurveValue = texture2D(toneCurveTexture, vec2(textureColor.b, 0.0)).b;\n\n     lowp vec4 textureColor2 = vec4(redCurveValue,greenCurveValue,blueCurveValue,textureColor.a);\n     textureColor = vec4(mix(textureColor.rgb, textureColor2.rgb, textureColor2.a*mixturePercent), textureColor.a);\n     textureColor2 = vec4(39.0/255.0, 15.0/255.0, 15.0/255.0, 1.0);\n     lowp vec4 textureColor3 = max(textureColor, textureColor2);\n     textureColor =vec4(mix(textureColor.rgb, textureColor3.rgb, textureColor3.a*mixturePercent), textureColor.a);\n     textureColor2 = vec4(1.0, 204.0/255.0, 0.0, 1.0);\n          \n     textureColor3 = textureColor2 * textureColor + textureColor2 * (1.0 - textureColor.a) + textureColor * (1.0 - textureColor2.a);\n     textureColor =vec4(mix(textureColor.rgb, textureColor3.rgb, textureColor3.a*0.22*mixturePercent), textureColor.a);\n     textureColor2 = vec4(20.0/255.0, 34.0/255.0, 81.0/255.0, 1.0);\n     mediump vec4 whiteColor = vec4(1.0);\n     textureColor3 = whiteColor - ((whiteColor - textureColor2) * (whiteColor - textureColor));\n     textureColor =vec4(mix(textureColor.rgb, textureColor3.rgb, textureColor3.a*0.87*mixturePercent), textureColor.a);\n     float luminance = dot(textureColor.rgb, W);\n\n     mediump vec4 overlay = vec4(vec3(luminance), textureColor.a);\n     mediump vec4 base = textureColor;\n     \n     mediump float ra;\n     if (2.0 * base.r < base.a) {\n         ra = 2.0 * overlay.r * base.r + overlay.r * (1.0 - base.a) + base.r * (1.0 - overlay.a);\n     } else {\n         ra = overlay.a * base.a - 2.0 * (base.a - base.r) * (overlay.a - overlay.r) + overlay.r * (1.0 - base.a) + base.r * (1.0 - overlay.a);\n     }\n     \n     mediump float ga;\n     if (2.0 * base.g < base.a) {\n         ga = 2.0 * overlay.g * base.g + overlay.g * (1.0 - base.a) + base.g * (1.0 - overlay.a);\n     } else {\n         ga = overlay.a * base.a - 2.0 * (base.a - base.g) * (overlay.a - overlay.g) + overlay.g * (1.0 - base.a) + base.g * (1.0 - overlay.a);\n     }\n     \n     mediump float ba;\n     if (2.0 * base.b < base.a) {\n         ba = 2.0 * overlay.b * base.b + overlay.b * (1.0 - base.a) + base.b * (1.0 - overlay.a);\n     } else {\n         ba = overlay.a * base.a - 2.0 * (base.a - base.b) * (overlay.a - overlay.b) + overlay.b * (1.0 - base.a) + base.b * (1.0 - overlay.a);\n     }\n     \n     textureColor3 = vec4(ra, ga, ba, 1.0);\n     textureColor =vec4(mix(base.rgb, textureColor3.rgb, textureColor3.a*0.57*mixturePercent), base.a);\n     textureColor2 = vec4(61.0/255.0, 32.0/255.0, 51.0/255.0, 1.0);\n    \n     textureColor3 = max(textureColor, textureColor2);\n     gl_FragColor =vec4(mix(textureColor.rgb, textureColor3.rgb, textureColor3.a*mixturePercent), textureColor.a);\n }";

    public RetroPremiumFilter() {
        super(FRAGMENT_SHADER);
    }
}
